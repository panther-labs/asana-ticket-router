AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Hosted Ops CI

Mappings:
  Accounts:
    HostedOps:
      AccountId: 246537256134

Resources:
  DeployRCAndGALambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: ReadDeploymentArtifacts
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - arn:aws:s3:::panther-enterprise-us-west-2*
                  - arn:aws:s3:::panther-internal-rc-us-west-2*
        - PolicyName: ReadAirplaneSecrets
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: secretsmanager:GetSecretValue
                Resource:
                  - !Sub
                    - arn:aws:secretsmanager:us-west-2:${AccountId}:secret:airplane/*
                    - AccountId: !FindInMap [Accounts, HostedOps, AccountId]

  DeployRCAndGALambda:
    Type: AWS::Serverless::Function
    Properties:
      Description: A cron lambda to deploy latest RC and GA versions to internal accounts
      CodeUri: deploy_rc_and_ga/
      Handler: app.lambda_handler
      Runtime: python3.9
      MemorySize: 256
      Timeout: 900
      Role: !GetAtt DeployRCAndGALambdaRole.Arn
      Events:
        RegularSchedule:
          Type: Schedule
          Properties:
            # Every 5 minutes, 1am-4pm PDT, Mon-Fri
            Schedule: cron(0/5 8-23 ? * MON-FRI *)
        DemoSchedule:
          Type: Schedule
          Properties:
            Input: '{"is_demo_deployment": true}'
            # Every 15 minutes, 2am-3am PDT on Tue-Fri
            Schedule: cron(0/15 9-10 ? * TUE-FRI *)
      Layers:
        - !Sub arn:aws:lambda:${AWS::Region}:553035198032:layer:git:14

  AlarmTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: RC and GA deployments alarms
      TopicName: rc-and-ga-deployments-alarms

  DeployRCAndGALambdaAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
        - !Ref AlarmTopic
      AlarmDescription: RC and GA deployments failure
      AlarmName: rc-and-ga-deployments-failure
      ComparisonOperator: GreaterThanOrEqualToThreshold
      DatapointsToAlarm: 1
      Dimensions:
        - Name: FunctionName
          Value: !Ref DeployRCAndGALambda
      EvaluationPeriods: 60
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 1.0
      Unit: Count
      TreatMissingData: notBreaching

  PagerDutySubscription:
    Type: AWS::SNS::Subscription
    Properties:
      # Deployment - Working Hours endpoint
      Endpoint: https://events.pagerduty.com/integration/8ebdad11dc9f480bc0c33f8972eef906/enqueue
      Protocol: "https"
      RawMessageDelivery: false
      TopicArn: !Ref AlarmTopic

  DeploymentMetricsLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SecretAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: secretsmanager:GetSecretValue
                Resource:
                  - !Sub
                    - arn:aws:secretsmanager:us-west-2:${AccountId}:secret:panther-deployment-metrics*
                    - AccountId: !FindInMap [Accounts, HostedOps, AccountId]

  DeploymentMetricsLambda:
    Type: "AWS::Serverless::Function"
    Properties:
      Runtime: go1.x
      Description: Handle github webhooks
      MemorySize: 128
      Handler: deployment_metrics
      CodeUri: deployment_metrics/
      Timeout: 5
      Role: !GetAtt DeploymentMetricsLambdaRole.Arn
      Events:
        ApiEvent:
          Type: HttpApi
          Properties:
            Method: POST
            Path: /webhook
            TimeoutInMillis: 15000
            PayloadFormatVersion: "2.0"
            RouteSettings:
              ThrottlingBurstLimit: 600
      Environment:
        Variables:
          DATADOG_SECRET_ARN: arn:aws:secretsmanager:us-west-2:246537256134:secret:panther-deployment-metrics-datadog-lF5fVv
          GITHUB_SECRET_ARN: arn:aws:secretsmanager:us-west-2:246537256134:secret:panther-deployment-metrics-github-cKoY35

  SuspendTrialAccountLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: ReadHostedDeploymentsRepoSecret
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: secretsmanager:GetSecretValue
                Resource:
                  - !Sub
                    - arn:aws:secretsmanager:us-west-2:${AccountId}:secret:airplane/hosted-deployments-deploy-key-base64
                    - AccountId: !FindInMap [Accounts, HostedOps, AccountId]

  SuspendTrialAccountLambda:
    Type: AWS::Serverless::Function
    Properties:
      Description: A sns-triggered lambda to scale-down a trial account via hosted-deployments repo
      CodeUri: suspend_trial_account/
      Handler: app.lambda_handler
      Runtime: python3.9
      MemorySize: 256
      Timeout: 60
      Role: !GetAtt SuspendTrialAccountLambdaRole.Arn
      Layers:
        - !Sub arn:aws:lambda:${AWS::Region}:553035198032:layer:git:14

  SuspendTrialAccountLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref SuspendTrialAccountTopic
      FunctionName: !GetAtt SuspendTrialAccountLambda.Arn

  SuspendTrialAccountTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: Suspend Trial Account Topic
      TopicName: suspend-trial-account-topic
      Subscription:
        - Endpoint: !Ref SuspendTrialAccountLambda
          Protocol: lambda

  SuspendTrialAccountTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - !Ref SuspendTrialAccountTopic
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Resource: "*"
            Principal: "*"
            Action:
              - sns:Publish
            StringEquals:
              aws:PrincipalOrgID: o-he117ni5su
              ForAnyValue:StringLike:
                aws:PrincipalArn:
                  - arn:aws:iam::*:role/*-OrganizationAPIFunctionRole-* # CloudFormation naming
                  - arn:aws:iam::*:role/panther-organization-api-function-* # Pulumi naming
